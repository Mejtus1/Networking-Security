Volatile and non-volatile data in LINUX 
Linux us a open-source OS that is used extensively for enterprise servers and emoloyee platoforms 

Collecting Volatile Data 
- Hostname, date and time 
- Uptime
- Open ports
- Network information
- Running processes 
- Open files 
- Loaded kernel modules 
- User events
- Swap areas and Disk pertition information 
- Mounted filesystem information
————————————————————
Commands 

hostname - outputs type of OS (example: Ubuntu) 

date - outputs date / time 

cat /etc/timezone - outputs timezone (example: America/Los_Angeles) 

date +%s = calculate the epoch time - time the system was put into working state for the first time 
At internet there are apps for it - example: epoch converter 

uptime - displays how long the system has been running since the last start 

ip addr show = new ipconfig (it is out of date now) 

pomiscious mode on NIC card
ifconfig user/pcname
ifconfig name -promisc

netstat = extract network information 
netstat -rn = displays devices routing table 
ip r = provides data about on information about TCP/IP data packets

collecting open ports
- we use app NMAP for that, 
nmap -sT localhost = make a full TCP connection with local host and scan for open ports 
namp -sU localhost = make a UDP connection with local host and scan for open ports

lsof = list all current open files and active processes associated with them 

cat /proc/cpuinfo = views details about CPU on the machine 
cat/self/mount = view mount points and mounted devices
uname -r = gives information about kernel 
cat /etc/passwd = stores local user account information 
cat /var/log/auth.log = contains information related to the users authentication and autorization events
grep sudo /var/log/auth.log = filters out sudo user information 

---------------------------------------------------------------------------------------------------------------
Different Linux distributions may have slightly different file system structures, but the core structure is common to all distributions. 
These directory locations are used to store specific types of data as follows:

/tmp: Stores temporary files. It is often used as a workspace by applications. Users should not use this directory to store anything of any importance because many Linux distributions wipe this directory on boot, and in a default installation, any user is able to read and write to this directory. Attackers may use this folder to store malware, often as the first stage of an attack, because it is a consistent and permissive directory across Linux installations.

/home: Location where the personal directories for users are stored. These directories should be secured because they often contain private and sensitive information (like configuration files with password, SSH private identity keys, and user files). 

/usr: Used to store user-space programs and data. The reason for the /usr directory is mostly historical, but in modern Linux installations it contains several subdirectories:

    /usr/local: A location set aside for administrators to install software.

    /usr/share: Originally, this directory was used to share files between hosts that could be used on different Linux/Unix platforms. It was designed as a workaround when disk space was at a premium. Today's systems have no such constraints, so it is no longer used in that capacity. 

    /usr/lib: Stores library files that executable programs need to access at run time

    /usr/bin and /usr/sbin: These directories are used to store binary (compiled) executable files. These files make up the bulk of the Linux operating system. The /usr/sbin was traditionally reserved for files that can only be used by root, but that distinction no longer applies.

    /usr/man: This directory is used to store the manual pages, AKA “man pages,” that contain the documentation for important files in the operating system and installed applications.

/dev: Contains device files. Hardware and virtual devices, such as terminals, appear as files to the operating system. When Linux needs to access a device, it often does so by interacting through device files. Unlike other directories here, this folder is "special" in that the files and folders inside are representations of hardware and objects in the kernel. For example, although it appears to be a file, /dev/sda may point to your first hard disk drive, and /dev/urandom is a secure random number generator.

/etc: Stores system configuration files for the operating system and services. For example, SSL keys for web servers, private keys for SSH servers, and user accounts and passwords are kept here. This directory must be kept secure to keep the system secure.

/var: This directory is used by the operating system and applications to store run-time data and log files. There are several subdirectories that are located here, two of which are common to all Linux distributions:

    /var/log: Used by the operating system and applications to store log files. At a minimum, non-privileged users must be prevented from writing to this folder. Otherwise, the integrity of the log files would be compromised after an attack.

    /var/tmp: Used as a workspace to store temporary run-time data for the operating system and running applications.

/bin and /sbin: Used to store system binary files. Traditionally, files stored here were required to boot the operating system. All other system files were stored in the /usr/bin and /usr/sbin directories. But now, many files found in /usr/bin and /usr/sbin are required at boot time.

/lib: Stores library files that must be available to executable files at run time.

---------------------------------------------------------------------------------------------------------------
File System Types

File systems themselves come in several varieties. The native Linux file system is known as extended file system or ext. This file system type has been updated over the years; the most current version is ext4. Linux continues to support the two previous versions: ext2 and ext3. There are several file system types that you are likely to encounter in Linux environments:

ext2, ext3 and ext4: Considered native Linux file systems, ext4 is the most current. Linux maintains backward compatibility with the previous versions as well.

NTFS: Used by modern Microsoft Windows environments, this complex file system supports versatile permissions, large disks, and other advanced features.

FAT16, FAT32, exFAT: FAT was the native file system in older Microsoft environments. It has mostly been replaced by NTFS but remains as a fairly common file system type since many USB storage devices come formatted with the FAT file system. FAT file systems are Linux compatible, but lack features such as permissions and support for large disks.

ISO 9660 and JOLIET: File system standards that are used on optical media, like DVDs and CDs.

HFS+: The file system that is used by Apple systems running operating system X. Linux ships with drivers that can read and write to this file system, so there is compatibility between Linux and HFS+.

Swap: A special type of file system that is used in Linux swap partitions. The swap partition is disk space that is reserved for the system to use when it needs to free memory resources. The system’s main memory (RAM) is very fast compared to disk drives, so, ideally, you will want to run everything in main memory. 
However, if the system starts to run low on main memory, it can free up memory resources by moving data in memory to the swap partition. So, the swap space is not really a file system at all. It is directly addressable space on a disk drive to temporarily dump content from main memory. When a system’s main memory resources are oversubscribed, 
you will find that the system’s performance will degrade substantially because it is moving data much more frequently between main memory and the swap disk.

---------------------------------------------------------------------------------------------------------------
System Initialization
The general sequence of events in the Linux boot process is as follows:

Hardware checks

Device bus discovery

Device discovery

Kernel subsystem initializes

Root file system mounts

Start user processes

The key component that starts the boot process is the bootloader. 
There are many boot loaders available to choose from, but the two most common are GRUB and LILO. 
Because no drivers to access disk drives are available at start time, the bootloader must interact with the system’s BIOS, 
or its more modern counterpart UEFI, to access the disk hardware. The BIOS/UEFI resides in the system’s firmware. 
It contains enough code to perform some basic system checks and initialization of system peripherals at boot time. 
One of the checks that it performs is to find the system start disk and read its partition table, which contains a small bootstrap program. 
The bootloader’s primary job is to find the kernel on the startup disk and load the kernel into memory so that it can begin booting the system.

Boot parameters that are processed by the bootloader are called /proc/cmdline. An example of its contents follows:

 BOOT_IMAGE=/boot/vmlinuz-4.4.0-22-generic root=UUID=339228c9-cbc3-4503-950f-40415e03779f ro quiet splash 

The BOOT_IMAGE parameter contains a reference to the Linux kernel and the root parameter that follows it identifies the disk drive where the boot image can be found. 
Note that the disk is referenced with its UUID. It can also be referenced using its device name, /dev/sda1, for example, but most modern Linux implementations will use the UUID.
---------------------------------------------------------------------------------------------------------------
Disk Partitions
- partitions are areas of the physical disk that are reserved for storing data
- /dev directory lists the structure of disk devices
- physical disks have 3 letter code assigned to them - sda, sdb 

/dev/sda: The first physical disk
/dev/sda1: The first partition of the first physical disk
/dev/sda2: The second partition of the first physical disk

MBR
Master Boot record- older partition table, limited partitions on the disk (4)
- disk may have only one MBR 
GPT
- newer type of partition table 
- removes restrictions on disks 

